SYED HARIZ - s3701799

TASK1 - CODE

# MODIFIED guestbook.py file

#!/usr/bin/env python

# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# [START imports]
import os
import urllib

from google.appengine.api import users
from google.appengine.ext import ndb

import jinja2
import webapp2

JINJA_ENVIRONMENT = jinja2.Environment(
    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
    extensions=['jinja2.ext.autoescape'],
    autoescape=True)
# [END imports]

DEFAULT_GUESTBOOK_NAME = 'default_guestbook'


# We set a parent key on the 'Greetings' to ensure that they are all
# in the same entity group. Queries across the single entity group
# will be consistent. However, the write rate should be limited to
# ~1/second.

def guestbook_key(guestbook_name=DEFAULT_GUESTBOOK_NAME):
    """Constructs a Datastore key for a Guestbook entity.

    We use guestbook_name as the key.
    """
    return ndb.Key('Guestbook', guestbook_name)


# [START greeting]
class Author(ndb.Model):
    """Sub model for representing an author."""
    identity = ndb.StringProperty(indexed=False)
    email = ndb.StringProperty(indexed=False)


class Greeting(ndb.Model):
    """A main model for representing an individual Guestbook entry."""
    author = ndb.StructuredProperty(Author)
    content = ndb.StringProperty(indexed=False)
    subject = ndb.StringProperty(indexed=False) # ADDED A NEW STRING PROPERTY
    date = ndb.DateTimeProperty(auto_now_add=True)
# [END greeting]


# [START main_page]
class MainPage(webapp2.RequestHandler):

    def get(self):
        guestbook_name = self.request.get('guestbook_name',
                                          DEFAULT_GUESTBOOK_NAME)
        greetings_query = Greeting.query(
            ancestor=guestbook_key(guestbook_name)).order(-Greeting.date)
        greetings = greetings_query.fetch(10)

        user = users.get_current_user()
        if user:
            url = users.create_logout_url(self.request.uri)
            url_linktext = 'Logout'
        else:
            url = users.create_login_url(self.request.uri)
            url_linktext = 'Login'

        template_values = {
            'user': user,
            'greetings': greetings,
            'guestbook_name': urllib.quote_plus(guestbook_name),
            'url': url,
            'url_linktext': url_linktext,
        }

        template = JINJA_ENVIRONMENT.get_template('index.html')
        self.response.write(template.render(template_values))
# [END main_page]


# [START guestbook]
class Guestbook(webapp2.RequestHandler):

    def post(self):
        # We set the same parent key on the 'Greeting' to ensure each
        # Greeting is in the same entity group. Queries across the
        # single entity group will be consistent. However, the write
        # rate to a single entity group should be limited to
        # ~1/second.
        guestbook_name = self.request.get('guestbook_name',
                                          DEFAULT_GUESTBOOK_NAME)
        greeting = Greeting(parent=guestbook_key(guestbook_name))

        if users.get_current_user():
            greeting.author = Author(
                    identity=users.get_current_user().user_id(),
                    email=users.get_current_user().email())

        greeting.content = self.request.get('content')
        greeting.subject = self.request.get('subject') # ADDED A NEW REQUEST
        greeting.put()

        query_params = {'guestbook_name': guestbook_name}
        self.redirect('/?' + urllib.urlencode(query_params))
# [END guestbook]


# [START app]
app = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/sign', Guestbook),
], debug=True)
# [END app]



<!-- MODIFIED index.html -->

<!DOCTYPE html>
{% autoescape true %}
<html>
  <head>
    <!-- [START css] -->
    <link type="text/css" rel="stylesheet" href="/bootstrap/css/bootstrap.css">
    <link type="text/css" rel="stylesheet" href="/bootstrap/css/bootstrap-responsive.css">
    <!-- [END css] -->
    <style type="text/css">
      body {
        padding-top: 40px;
        padding-bottom: 40px;
        background-color: #f5f5f5;
      }
      blockquote {
        margin-bottom: 10px;
        border-left-color: #bbb;
      }
      form {
        margin-top: 10px;
      }
      .form-signin input[type="text"] {
        font-size: 16px;
        height: auto;
        margin-bottom: 15px;
        padding: 7px 9px;
      }
      .row {
        margin-left: 0px;
        margin-top: 10px;
        overflow: scroll;
      }
    </style>
  </head>
  <body>
    <div class="navbar navbar-inverse navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="brand" href="#">App Engine Guestbook</a>
          <div class="nav-collapse collapse pull-right">
            <a href="{{ url|safe }}" class="btn">{{ url_linktext }}</a>
          </div>
        </div>
      </div>
    </div>
    <div class="container">
      <!-- [START greetings] -->
      {% for greeting in greetings %}
      <div class="row">
        {% if greeting.author %}
          <b>{{ greeting.author.email }}
            {% if user and user.user_id() == greeting.author.identity %}
              (You)
            {% endif %}
          </b> wrote:
        {% else %}
          An anonymous person wrote:
        {% endif %}
        <blockquote><b>{{ greeting.subject }}</b> {{ greeting.content }}</blockquote>
      </div>
      {% endfor %}
      <!-- [END greetings] -->

      <form action="/sign?guestbook_name={{ guestbook_name }}" method="post">
        <div>Subject:<br><input type="text" name="subject"> </div> <!-- NEW INPUT TYPE SUBJECT IS ADDED -->
        <div><textarea name="content" class="input-block-level" rows="3"></textarea></div>
        <div><input type="submit" class="btn btn-large btn-primary" value="Sign Guestbook"></div>
      </form>

      <hr>

      <form>Guestbook name:
        <input value="{{ guestbook_name }}" name="guestbook_name">
        <input type="submit" value="switch">
      </form>

      <a href="{{ url|safe }}">{{ url_linktext }}</a>
    </div>
  </body>
</html>
{% endautoescape %}





TASK2 - CODE

4. login.php

<?php
session_start(); #start session

if(isset($_POST["login"])) #check if login button is clicked
{  
    if(empty($_POST["username"]) or empty($_POST["password"]))  #check if username or password input is empty
	{ 
        $login_err = '<span> Please enter username and password </span>'; 
    } 
	else 
	{
        $file_path = "gs://s3701799-storage/users.txt"; #file path in GCP storage

       if(is_file($file_path)) #validating file
	   { 
           $data = explode(PHP_EOL, file_get_contents($file_path)); #read file and store in array

            if(!empty($data)) #check if file is empty
			{ 
                $arrlength = count($data); #count the length of data

                for($x = 0; $x < $arrlength; $x++) 
				{
                    $username = strtok($data[$x], "|"); #filter & store username
                    $pass = strtok(''); #filter & store password

                    if($_POST["username"] == $username && $_POST["password"] == $pass) #validate the username and password
					{ 
                        $_SESSION["user"] = $username; #store user in session
                        header("Location: main.php");
                        break;
                    }
                }
            }
       }
       
       $login_err = '<span> User name or password is invalid </span>'; #error message for wrong credentials
    }
}
?>
<html>
<body>
<div>
    <form action="login.php" method="POST">
        Username: <input type="text" name="username"><br>
        Password: <input type="password" name="password"><br>

        <input type="submit" value="Log in" name="login">
        <a href="register.php">Register</a>
    </form>
    <?php echo $login_err ?>
</div>
</body>
</html>


5. main.php

<?php
session_start();

if(!isset($_SESSION["user"])) {
    header("Location: login.php");
}
?>
<html>
<body>
    <div>
        <p>Logged in as <?php echo $_SESSION["user"] ?> <a href="logout.php">Log out</a></p>
        <hr>
        <h1> Main Content </h1>
    </div>
</body>
</html>


6. register.php

<?php
session_start(); #start session at the top of page

if(isset($_POST["register"])) #check if the user clicked the button
{
    if(empty($_POST["username"]) or empty($_POST["password"])) #check if the user input username and password
	{
        $user_err = '<span> User name or password cannot be empty </span>'; #error message
    } 
	else 
	{
        $file_path = "gs://s3701799-storage/users.txt"; #The path of GCP storage

        if(is_file($file_path)) #validating file
		{ 
            $data = explode(PHP_EOL, file_get_contents($file_path)); 
        }

        $file = fopen($file_path, 'w'); #overwrite the file
        
        if(!empty($data)) #check if any data in the file
		{ 
            $arrlength = count($data); #count the length of data
            for($x = 0; $x < $arrlength; $x++) 
			{
                fwrite($file, $data[$x].PHP_EOL); #loop and write the existing data back into the file
            }
        }

        $new_user = $_POST["username"]."|".$_POST["password"]; #create variable for new register username and password

        fwrite($file, $new_user) ; #write to file 

        fclose($file); #close the file after write
        header("Location: login.php"); #redirect back to login page
    }
}
?>
<html>
<body>
    <div>
        <form action="register.php" method="POST">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Register" name="register">
        </form>
        <?php echo $user_err ?>
    </div>
</body>
</html>


EXTRA. logout.php 

<?php
session_start();
session_destroy();

header("Location: login.php");
?>





TASK3 - QUERIES

8. SELECT * FROM `task3-251404.baby.baby_names` where gender = "F" and count between 7000 and 17000 and year > 2008;

9. SELECT SUM(count) from `task3-251404.baby.baby_names` where gender = "M" and year < 2011 and name like 'T%';

10. SELECT name, SUM(count) as freq FROM `task3-251404.baby.baby_names` WHERE gender='F' and year > 2006 Group by name ORDER BY freq DESC LIMIT 20;





TASK4 - ANSWERS

11. Netflix – Having an overwhelmed number of users, Netflix changed to cloud computing from a traditional data centre approach. 
Cloud helps to provide scalability in order to meet spikes in demand.

Pinterest – Designed to aggregate large amounts of data, Pinterest uses cloud services to handle its activities, 
analyse and store its data while maintaining a small team which proves it is beneficial.

MediaMath – MediaMath turned to a cloud database due to the amount and complexity of data the tool is collecting. 
Cloud database provides big data analytics solution to process data being collected and give deeper insights to target audience.

12. A proposal to create a cloud based website for instructors and students to use. Key features of this app allows instructors to 
create a new course, edit and view existing courses. Students can view the details of a course (etc time, location, courseID) and 
express their interest via like and dislike button.
